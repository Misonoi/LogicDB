// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: logicdb.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogicDB_Set_FullMethodName           = "/proto.LogicDB/Set"
	LogicDB_Remove_FullMethodName        = "/proto.LogicDB/Remove"
	LogicDB_Get_FullMethodName           = "/proto.LogicDB/Get"
	LogicDB_RemoveWithGet_FullMethodName = "/proto.LogicDB/Remove_with_get"
)

// LogicDBClient is the client API for LogicDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogicDBClient interface {
	Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResp, error)
	Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	RemoveWithGet(ctx context.Context, in *RemoveWithGetReq, opts ...grpc.CallOption) (*RemoveWithGeqResp, error)
}

type logicDBClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicDBClient(cc grpc.ClientConnInterface) LogicDBClient {
	return &logicDBClient{cc}
}

func (c *logicDBClient) Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResp, error) {
	out := new(SetResp)
	err := c.cc.Invoke(ctx, LogicDB_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicDBClient) Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error) {
	out := new(RemoveResp)
	err := c.cc.Invoke(ctx, LogicDB_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicDBClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, LogicDB_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicDBClient) RemoveWithGet(ctx context.Context, in *RemoveWithGetReq, opts ...grpc.CallOption) (*RemoveWithGeqResp, error) {
	out := new(RemoveWithGeqResp)
	err := c.cc.Invoke(ctx, LogicDB_RemoveWithGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicDBServer is the server API for LogicDB service.
// All implementations must embed UnimplementedLogicDBServer
// for forward compatibility
type LogicDBServer interface {
	Set(context.Context, *SetReq) (*SetResp, error)
	Remove(context.Context, *RemoveReq) (*RemoveResp, error)
	Get(context.Context, *GetReq) (*GetResp, error)
	RemoveWithGet(context.Context, *RemoveWithGetReq) (*RemoveWithGeqResp, error)
	mustEmbedUnimplementedLogicDBServer()
}

// UnimplementedLogicDBServer must be embedded to have forward compatible implementations.
type UnimplementedLogicDBServer struct {
}

func (UnimplementedLogicDBServer) Set(context.Context, *SetReq) (*SetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedLogicDBServer) Remove(context.Context, *RemoveReq) (*RemoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedLogicDBServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLogicDBServer) RemoveWithGet(context.Context, *RemoveWithGetReq) (*RemoveWithGeqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWithGet not implemented")
}
func (UnimplementedLogicDBServer) mustEmbedUnimplementedLogicDBServer() {}

// UnsafeLogicDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogicDBServer will
// result in compilation errors.
type UnsafeLogicDBServer interface {
	mustEmbedUnimplementedLogicDBServer()
}

func RegisterLogicDBServer(s grpc.ServiceRegistrar, srv LogicDBServer) {
	s.RegisterService(&LogicDB_ServiceDesc, srv)
}

func _LogicDB_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicDBServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicDB_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicDBServer).Set(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicDB_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicDBServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicDB_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicDBServer).Remove(ctx, req.(*RemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicDB_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicDBServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicDB_RemoveWithGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWithGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicDBServer).RemoveWithGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicDB_RemoveWithGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicDBServer).RemoveWithGet(ctx, req.(*RemoveWithGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LogicDB_ServiceDesc is the grpc.ServiceDesc for LogicDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogicDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LogicDB",
	HandlerType: (*LogicDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _LogicDB_Set_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _LogicDB_Remove_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LogicDB_Get_Handler,
		},
		{
			MethodName: "Remove_with_get",
			Handler:    _LogicDB_RemoveWithGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logicdb.proto",
}
